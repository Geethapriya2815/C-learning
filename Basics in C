C Language Introduction
Last Updated : 10 Jan, 2025
C is a procedural programming language initially developed by Dennis Ritchie in the year 1972 at Bell Laboratories of AT&T Labs. It was mainly developed as a system programming language to write the UNIX operating system.

C Language Introduction
The main features of the C language include:

General Purpose and Portable
Low-level Memory Access
Fast Speed
Clean Syntax
These features make the C language suitable for system programming like an operating system or compiler development.

Why Should We Learn C?
Many later languages have borrowed syntax/features directly or indirectly from the C language like the syntax of Java, PHP, JavaScript, and many other languages that are mainly based on the C language. C++ is nearly a superset of C language (Only a few programs may compile in C, but not in C++).

So,  if a person learns C programming first, it will help them to learn any modern programming language as well. Also, learning C helps to understand a lot of the underlying architecture of the operating system like pointers, working with memory locations, etc.

Difference Between C and C++
C++ was created to add the OOPs concept into the C language so they both have very similar syntax with a few differences. The following are some of the main differences between C and C++ Programming languages.

C++ supports OOPs paradigm while C only has the procedural concept of programming.
C++ has exception handling capabilities. In C, we have to resolve exceptions manually.
There are no references in C.
There are many more differences between C and C++ which are discussed here: Difference between C and C++

Beginning with C Programming
Writing the First Program in C
The following code is one of the simplest C programs that will help us understand the basic syntax structure of a C program.

Example:



1
#include <stdio.h>
2
​
3
int main() {
4
  int a = 10;
5
  printf("%d", a);
6
  
7
  return 0;  
8
}

Output
10
Let us analyze the structure of our program line by line.

Structure of the C program
After the above discussion, we can formally assess the basic structure of a C program. By structure, it is meant that any program can be written in this structure only. Writing a C program in any other structure will lead to a Compilation Error. The structure of a C program is as follows:

structure of c program
Components of a C Program:
1. Header Files Inclusion – Line 1 [#include <stdio.h>]
The first and foremost component is the inclusion of the Header files in a C program. A header file is a file with extension .h which contains C function declarations and macro definitions to be shared between several source files. All lines that start with # are processed by a preprocessor which is a program invoked by the compiler. In the above example, the preprocessor copies the preprocessed code of stdio.h to our file. The .h files are called header files in C.
Some of the C Header files:

stddef.h – Defines several useful types and macros.
stdint.h – Defines exact width integer types.
stdio.h – Defines core input and output functions
stdlib.h – Defines numeric conversion functions, pseudo-random number generator, and memory allocation
string.h – Defines string handling functions
math.h – Defines common mathematical functions.
2. Main Method Declaration – Line 2 [int main()]
The next part of a C program is to declare the main() function. It is the entry point of a C program and the execution typically begins with the first line of the main(). The empty brackets indicate that the main doesn’t take any parameter (See this for more details). The int that was written before the main indicates the return type of main(). The value returned by the main indicates the status of program termination. See this post for more details on the return type.

3. Body of Main Method – Line 3 to Line 6 [enclosed in {}]
The body of a function in the C program refers to statements that are a part of that function. It can be anything like manipulations, searching, sorting, printing, etc. A pair of curly brackets define the body of a function. All functions must start and end with curly brackets.

4. Statement – Line 4 [printf(“Hello World”);]
Statements are the instructions given to the compiler. In C, a statement is always terminated by a semicolon (;). In this particular case, we use printf() function to instruct the compiler to display “Hello World” text on the screen.

5. Return Statement – Line 5 [return 0;]
The last part of any C function is the return statement. The return statement refers to the return values from a function. This return statement and return value depend upon the return type of the function. The return statement in our program returns the value from main(). The returned value may be used by an operating system to know the termination status of your program. The value 0 typically means successful termination. 

How to Execute the Above Program?
In order to execute the above program, we need to first compile it using a compiler and then we can run the generated executable. There are online IDEs available for free like GeeksforGeeksIDE, that can be used to start development in C without installing a compiler.

Windows: There are many free IDEs available for developing programs in C like Code Blocks and Dev-CPP. IDEs provide us with an environment to develop code, compile it and finally execute it. We strongly recommend Code Blocks.
Linux: GCC compiler comes bundled with Linux which compiles C programs and generates executables for us to run. Code Blocks can also be used with Linux. 
macOS: macOS already has a built-in text editor where you can just simply write the code and save it with a “.c” extension.
Application of C 
Operating systems: C is widely used for developing operating systems such as Unix, Linux, and Windows.
Embedded systems: C is a popular language for developing embedded systems such as microcontrollers, microprocessors, and other electronic devices.
System software: C is used for developing system software such as device drivers, compilers, and assemblers.
Networking: C is widely used for developing networking applications such as web servers, network protocols, and network drivers.
Database systems: C is used for developing database systems such as Oracle, MySQL, and PostgreSQL.
Gaming: C is often used for developing computer games due to its ability to handle low-level hardware interactions.
Artificial Intelligence: C is used for developing artificial intelligence and machine learning applications such as neural networks and deep learning algorithms.
Scientific applications: C is used for developing scientific applications such as simulation software and numerical analysis tools.
Financial applications: C is used for developing financial applications such as stock market analysis and trading systems.
C Hello World Program
Last Updated : 14 Jan, 2025
The “Hello World” program is the first step towards learning any programming language. It is also one of the simplest programs that is used to introduce aspiring programmers to the programming language. It typically outputs the text “Hello, World!” to the console screen.

C Program to Print “Hello World”
To print the “Hello World”, we can use the printf function from the stdio.h library that prints the given string on the screen. Provide the string “Hello World” to this function as shown in the below code:



1
// Header file for input output functions
2
#include <stdio.h>
3
​
4
// Main function: entry point for execution
5
int main() {
6
​
7
    // Writing print statement to print hello world
8
    printf("Hello World");
9
​
10
    return 0;
11
}

Output
Hello World
Explanation:

#include <stdio.h> – This line includes the standard input-output library in the program.
int main() – The main function where the execution of the program begins.
printf(“Hello, World!\n”); – This function call prints “Hello, World!” followed by a new line.
return 0; -This statement indicates that the program ended successfully.
C Comments
Last Updated : 17 Jan, 2025
The comments in C are human-readable explanations or notes in the source code of a C program.  A comment makes the program easier to read and understand. These are the statements that are not executed by the compiler or an interpreter.

Example:



1
#include <stdio.h>
2
int main() {
3
  
4
      // This is a comment, the below statement will not be executed
5
    // printf("Hi from comment");
6
    printf("Hello");
7
    return 0;
8
}

Output
Hello
In C there are two types of comments in C language:

Table of Content

Single-line Comments
Multi-line Comments
Single-line Comments
Single-line comments are used to comment out a single line of code or a part of it. These comments start with two forward slashes (//), and everything after the slashes on that line is considered a comment. They are also called C++ Style comments as they were first introduced in C++ and later adopted in C also.

Syntax:

//  This is a single line comment


Example:



1
#include <stdio.h>
2
​
3
int main() {
4
  
5
    // This is a single-line comment explaining the variable x
6
    int x = 5;  
7
  
8
    // Output the value of x
9
    printf("Value of x: %d\n", x);  
10
    return 0;
11
}

Output
Value of x: 5
In this example, the comments provide explanations about the code. The compiler ignores the comments and does not execute them.

We can also create a comment that displays at the end of a line of code using a single-line comment. But generally, it’s better to practice putting the comment before the line of code.



1
#include <stdio.h>
2
​
3
int main() {
4
    // single line comment here
5
  
6
    printf("Hi"); // After line comment here
7
    return 0;
8
}

Output
Welcome to GeeksforGeeks
Multi-line Comments
Multi-line comments are used for longer descriptions or for commenting out multiple lines of code. These comments begin with /* and end with */. Everything between these markers is treated as a comment.

Syntax:

/* This is a multi-line comment
   which can span multiple lines */


Example:



1
#include <stdio.h>
2
​
3
int main() {
4
  
5
     /*
6
    This comment contains some code which
7
    will not be executed.
8
    printf("Code enclosed in Comment");
9
    */
10
    printf("Welcome to GeeksforGeeks");
11
    return 0;
12
}

Output
Welcome to GeeksforGeeks
Nesting Comments
In C, comments cannot be nested. That means you cannot place a multi-line comment inside another multi-line comment. If you try to do so, the compiler will treat the closing */ of the inner comment as the end of the entire multi-line comment.



1
#include <stdio.h>
2
​
3
int main() {
4
    /* This is the start of a multi-line comment
5
       /* This is an inner multi-line comment */
6
       This line will cause an error because the compiler
7
       considers the above '*/' as the end of the comment block.
8
    */
9
    printf("This program will not compile.\n");
10
    return 0;
11
}

Output

./Solution.c: In function 'main':
./Solution.c:6:8: error: unknown type name 'This'
        This line will cause an error because the compiler
        ^
./Solution.c:6:18: error: expected '=', ',', ';', 'asm' or '__attribute__' before 'will'
        This line will cause an error because the compiler
                  ^
If nested comments are needed, it’s best to use single-line comments or comment out individual parts.



1
#include <stdio.h>
2
​
3
int main() {
4
    // /* This block of code is commented out
5
    // int x = 10; 
6
    // printf("Value of x: %d\n", x); 
7
    // */
8
​
9
    printf("Program runs without errors.\n");
10
    return 0;
11
}


In C programming, tokens are the smallest units in a program that have meaningful representations. Tokens are the building blocks of a C program, and they are recognized by the C compiler to form valid expressions and statements. Tokens can be classified into various categories, each with specific roles in the program.

Types of Tokens in C
Tokens-in-C
The tokens of C language can be classified into six types based on the functions they are used to perform. The types of C tokens are as follows:

Table of Content

Punctuators
Keywords
Strings
Operators
Identifiers
Constants
1. Punctuators
The following special symbols are used in C having some special meaning and thus, cannot be used for some other purpose. Some of these are listed below:

Brackets[]: Opening and closing brackets are used as array element references. These indicate single and multidimensional subscripts.
Parentheses(): These special symbols are used to indicate function calls and function parameters.
Braces{}: These opening and ending curly braces mark the start and end of a block of code containing more than one executable statement.
Comma (, ): It is used to separate more than one statement like for separating parameters in function calls.
Colon(:): It is an operator that essentially invokes something called an initialization list.
Semicolon(;): It is known as a statement terminator.  It indicates the end of one logical entity. That’s why each individual statement must be ended with a semicolon.
Asterisk (*): It is used to create a pointer variable and for the multiplication of variables.
Assignment operator(=): It is used to assign values and for logical operation validation.
Pre-processor (#): The preprocessor is a macro processor that is used automatically by the compiler to transform your program before actual compilation.
Period (.): Used to access members of a structure or union.
Tilde(~): Bitwise One’s Complement Operator.
Example:




#include <stdio.h>  
int main() {
  
    // '\n' is a special symbol that
    // represents a newline
    printf("Hello, World!\n");  
    return 0;
}

Output
Hello, World!
2. Keywords
Keywords are reserved words that have predefined meanings in C. These cannot be used as identifiers (variable names, function names, etc.). Keywords define the structure and behavior of the program C language supports 32 keywords some of them are:

int, for, if, else, while, return, etc.


Example:




#include <stdio.h>  
int main() {
   
    // 'int' is a keyword used to define
    // variable type
    int x = 5;  
    printf("%d", x);
  
    // 'return' is a keyword used to exit
    // main function
    return 0;  
}

Output
5
Note: The number of keywords may change depending on the version of C you are using. For example, keywords present in ANSI C are 32 while in C11, it was increased to 44. Moreover, in the latest c23, it is increased to around 54.


3. Strings
Strings are nothing but an array of characters ended with a null character (‘\0’). This null character indicates the end of the string. Strings are always enclosed in double quotes. Whereas a character is enclosed in single quotes in C and C++.

Examples:




#include <stdio.h>  
int main() {
  
    // "Hello, World!" is a string literal
    char str[] = "Hello, World!";  
    printf("%s", str);
    return 0;
}

Output
Hello, World!
4. Operators
Operators are symbols that trigger an action when applied to C variables and other objects. The data items on which operators act are called operands. 
Depending on the number of operands that an operator can act upon, operators can be classified as follows: 

Unary Operators: Those operators that require only a single operand to act upon are known as unary operators.For Example increment and decrement operators
Binary Operators: Those operators that require two operands to act upon are called binary operators. Binary operators can further are classified into: 
Arithmetic operators
Relational Operators
Logical Operators
Assignment Operators
Bitwise Operator
Ternary Operator: The operator that requires three operands to act upon is called the ternary operator. Conditional Operator(?) is also called the ternary operator.
Example:




#include <stdio.h>  
int main() {
    int a = 10, b = 5;  
  
    // '+' is an arithmetic operator used
    // for addition
    int sum = a + b;  
    printf("%d", sum); 
    return 0;
}

Output
15
5. Identifiers
Identifiers are names given to variables, functions, arrays, and other user-defined items. They must begin with a letter (a-z, A-Z) or an underscore (_) and can be followed by letters, digits (0-9), and underscores.

Example:




#include <stdio.h>  
int main() {
  
    // 'num' is an identifier used to name
    // a variable
    int num = 10;  
    printf("%d", num); 
    return 0;
}

Output
10
6. Constants
Constants are fixed values used in a C program. These values do not change during the execution of the program. Constants can be integers, floating-point numbers, characters, or strings.

Examples:




#include <stdio.h>  
int main() {
  
    // 'MAX_VALUE' is a constant that holds
    // a fixed value
    const int MAX_VALUE = 100;  
    printf("%d", MAX_VALUE);
    return 0;
}

Output
100


Keywords in C
Last Updated : 10 Jan, 2025
In C Programming language, there are many rules so to avoid different types of errors. One of such rule is not able to declare variable names with auto, long, etc. This is all because these are keywords. Let us check all keywords in C language.

What are Keywords?
Keywords are predefined or reserved words that have special meanings to the compiler. These are part of the syntax and cannot be used as identifiers in the program. A list of keywords in C or reserved words in the C programming language are mentioned below:

auto

break

case

char

const

continue

default

do

double

else

enum

extern

float

for

goto

if

int

long

register

return

short

signed

sizeof

static

struct

switch

typedef

union

unsigned

void

volatile

while

auto
auto is the default storage class variable that is declared inside a function or a block. auto variables can only be accessed within the function/block they are declared. By default, auto variables have garbage values assigned to them. Automatic variables are also called local variables as they are local to a function. 

auto int num;
Here num is the variable of the storage class auto and its type is int. Below is the C program to demonstrate the auto keyword:



1
// C program to demonstrate 
2
// auto keyword
3
#include <stdio.h>
4
​
5
int printvalue()
6
{
7
  auto int a = 10;
8
  printf("%d", a);
9
}
10
​
11
// Driver code
12
int main() 
13
{
14
  printvalue();
15
  return 0;
16
}

Output
10
break and continue
The break statement is used to terminate the innermost loop. It generally terminates a loop or a break statement. The continue statement skips to the next iteration of the loop. Below is the C program to demonstrate break and continue in C:



1
// C program to show use 
2
// of break and continue
3
#include <stdio.h>
4
​
5
// Driver code
6
int main()
7
{
8
  for (int i = 1; i <= 10; i++) 
9
  {
10
    if (i == 2) 
11
    {
12
      continue;
13
    }
14
    if (i == 6) 
15
    {
16
      break;
17
    }
18
    printf("%d ", i);
19
  }
20
  return 0;
21
}

Output
1 3 4 5 
switch, case, and default
The switch statement in C is used as an alternate to the if-else ladder statement. For a single variable i.e, switch variable it allows us to execute multiple operations for different possible values of a single variable. 

switch(Expression)
{
    case '1': // operation 1
            break;
    case:'2': // operation 2
            break;
    default: // default statement to be executed 
}
Below is the C program to demonstrate the switch case statement:



1
// C program to demonstrate 
2
// switch case statement
3
#include <stdio.h>
4
​
5
// Driver code
6
int main() {
7
  int i = 4;
8
  switch (i) {
9
    case 1: 
10
      printf("Case 1\n");break;
11
    case 2:
12
      printf("Case 2\n");break;
13
    case 3:
14
      printf("Case 3\n");break;
15
    case 4:
16
      printf("Case 4\n");break;
17
    default:
18
      printf("Default\n");break;
19
  }
20
}

Output
Case 4
Note: it is best to add a break statement after every case so that switch statement doesn’t continue checking the remaining cases.


Output
Case 4
Default
char
char keyword in C is used to declare a character variable in the C programming language.

char x = 'D';
Below is the C program to demonstrate the char keyword:



1
// C program to demonstrate 
2
// char keyword
3
#include <stdio.h>
4
​
5
// Driver code
6
int main() {
7
  char c = 'a';
8
  printf("%c", c);
9
  return 0;
10
}

Output
a
const
The const keyword defines a variable who’s value cannot be changed.

const int num = 10;
Below is the C program to demonstrate the const keyword:



1
// C program to demonstrate 
2
// const keyword
3
#include <stdio.h>
4
​
5
// Driver code
6
int main() {
7
  const int a = 11;
8
  a = a + 2;
9
  printf("%d", a);
10
  return 0;
11
}
This code will produce an error because the integer a was defined as a constant  and it’s value was later on changed.
Output:

error: assignment of read-only variable 'a'
       a = a + 2;
do
The do statement is used to declare a do-while loop. A do-while loop is a loop that executes once, and then checks it’s condition to see if it should continue through the loop. After the first iteration, it will continue to execute the code while the condition is true.

Below is the C program to demonstrate a do-while loop.



1
// C program to demonstrate
2
// do-while keyword
3
#include <stdio.h>
4
​
5
// Driver code
6
int main() 
7
{
8
  int i = 1;
9
  do {
10
    printf("%d ", i);
11
    i++;
12
  } while(i <= 5);
13
  
14
  return 0;
15
}

Output
1 2 3 4 5 
double and float
The doubles and floats are datatypes used to declare decimal type variables. They are similar, but doubles have 15 decimal digits, and floats only have 7.

Example:

float marks = 97.5;
double num;
Below is the C program to demonstrate double float keyword:



1
// C program to demonstrate 
2
// double float keyword
3
#include <stdio.h>
4
​
5
// Driver code
6
int main() {
7
  float f = 0.3;
8
  double d = 10.67;
9
  printf("Float value: %f\n", f);
10
  printf("Double value: %f\n", d);
11
  return 0;
12
}

Output
Float value: 0.300000
Double value: 10.670000
if-else
The if-else statement is used to make decisions, where if a condition is true, then it will execute a block of code; if it isn’t true (else), then it will execute a different block of code.

if(marks == 97) {
    // if marks are 97 then will execute this block of code
}
else {
    // else it will execute this block of code
}
Below is the C program to demonstrate an if-else statement:



1
// C program to demonstrate 
2
// if-else keyword
3
#include <stdio.h>
4
​
5
// Driver code
6
int main() 
7
{
8
  int a = 10;
9
  if(a < 11)
10
  {
11
    printf("A is less than 11");
12
  }
13
  else
14
  {
15
    printf("A is equal to or "
16
           "greater than 11");
17
  }  
18
  return 0;
19
}

Output
A is less than 11
enum
The enum keyword is used to declare an enum (short for enumeration). An enum is a user-defined datatype, which holds a list of user-defined integer constants. By default, the value of each constant is it’s index (starting at zero), though this can be changed. You can declare an object of an enum and can set it’s value to one of the constants you declared before. Here is an example of how an enum might be used:



1
// An example program to 
2
// demonstrate working of 
3
// enum in C
4
#include<stdio.h>
5
​
6
// enum declaration:
7
enum week{Mon, Tue, Wed, Thur, Fri, Sat, Sun};
8
​
9
// Driver code
10
int main()
11
{
12
//object of the enum (week), called day
13
  enum week day;
14
  day = Wed;
15
  printf("%d", day);
16
  return 0;
17
}

Output
2
extern
The extern keyword is used to declare a variable or a function that has an external linkage outside of the file declaration.



1
#include <stdio.h>
2
​
3
extern int a;
4
​
5
int main(){ 
6
  
7
    printf("%d", a);
8
​
9
      return 0;
10
}
for
The “for” keyword is used to declare a for-loop. A for-loop is a loop that is specified to run a certain amount of times.

Below is the C program to demonstrate a for-loop: 



1
// C program to demonstrate 
2
// for keyword
3
#include <stdio.h>
4
​
5
// Driver code
6
int main()
7
{
8
  for (int i = 0; i < 5; i++) 
9
  {
10
    printf("%d ", i);
11
  }
12
  return 0;
13
}

Output
0 1 2 3 4 
goto
The goto statement is used to transfer the control of the program to the given label. It is used to jump from anywhere to anywhere within a function.

Example:

goto label;
// code
label:
Below is the C program to demonstrate the goto keyword:



1
// C program demonstrate
2
// goto keyword
3
#include <stdio.h>
4
​
5
// Function to print numbers
6
// from 1 to 10
7
void printNumbers() {
8
    int n = 1;
9
​
10
label:
11
    printf("%d ", n);
12
    n++;
13
    if (n <= 10) goto label;
14
}
15
​
16
// Driver code
17
int main(){
18
    printNumbers();
19
    return 0;
20
}

Output
1 2 3 4 5 6 7 8 9 10 
int
int keyword is used in a type declaration to give a variable an integer type. In C, the integer variable must have a range of at least -32768 to +32767. 

Example:

int x = 10;
Below is the C program to show the int keyword:



1
// C program to demonstrate
2
// int keyword
3
#include <stdio.h>
4
​
5
void sum() {
6
    int a = 10, b = 20;
7
    int sum;
8
    sum = a + b;
9
    printf("%d", sum);
10
}
11
​
12
// Driver code
13
int main() {
14
    sum();
15
    return 0;
16
}

Output
30
short, long, signed, and unsigned
Different data types also have different ranges up to which they can store numbers. These ranges may vary from compiler to compiler. Below is a list of ranges along with the memory requirement and format specifiers on the 32-bit GCC compiler.

Data Type

Memory (bytes)

Range

Format Specifier

short int 

2

-32,768 to 32,767 

%hd 

unsigned short int 

2  

0 to 65,535

%hu

unsigned int 

4 

0 to 4,294,967,295 

%u 

long int 

4 

-2,147,483,648 to 2,147,483,647

%ld 

unsigned long int

4 

0 to 4,294,967,295 

%lu

long long int  

8

-(2^63) to (2^63)-1 

%lld 

unsigned long long int

8

0 to 18,446,744,073,709,551,615

%llu 

signed char

1

-128 to 127 

%c

unsigned char 

1

0 to 255 

%c

long double

16

3.4E-4932 to 1.1E+4932

%Lf 

Below is the C program to demonstrate the short, long, signed, and unsigned keywords:



1
// C program to demonstrate
2
// short, long, signed, 
3
// and unsigned keyword
4
#include <stdio.h>
5
​
6
// Driver code
7
int main() {
8
  // short integer
9
  short int a = 12345;
10
  
11
  // signed integer
12
  signed int b = -34;
13
  
14
  // unsigned integer
15
  unsigned int c = 12;
16
  
17
  // L or l is used for 
18
  // long int in C.
19
  long int d = 99998L;
20
  
21
  printf("Integer value with a short int data: %hd", a);
22
  printf("\nInteger value with a signed int data: %d", b);
23
  printf("\nInteger value with an unsigned int data: %u", c);
24
  printf("\nInteger value with a long int data: %ld", d);
25
  return 0;
26
}

Output
Integer value with a short int data: 12345
Integer value with a signed int data: -34
Integer value with an unsigned int data: 12
Integer value with a long int data: 99998
return
The return statement returns a value to where the function was called.

Example:

return x;
Below is the C program to demonstrate the return keyword:



1
// C program to demonstrate
2
// return keyword
3
#include <stdio.h>
4
int sum(int x, int y) {
5
  int sum;
6
  sum = x + y;
7
  return sum;
8
}
9
​
10
// Driver code
11
int main() {
12
  int num1 = 10;
13
  int num2 = 20;
14
  printf("Sum: %d", 
15
          sum(num1, num2));
16
  return 0;
17
}

Output
Sum: 30
sizeof 
sizeof is a keyword that gets the size of an expression, (variables, arrays, pointers, etc.) in bytes.

Example:

sizeof(char);
sizeof(int);
sizeof(float); in bytes.
Below is the C program to demonstrate sizeof keyword:



1
// C program to demonsstrate 
2
// sizeof keyword
3
#include <stdio.h>
4
​
5
// Driver code
6
int main() { 
7
  int x = 10;
8
  printf("%d", sizeof(x));
9
  return 0;
10
}

Output
4
register
Register variables tell the compiler to store variables in the CPU register instead of memory. Frequently used variables are kept in the CPU registers for faster access. 

Example: 

register char c = 's'; 
static 
The static keyword is used to create static variables. A static variable is not limited by a scope and can be used throughout the program. It’s value is preserved even after it’s  scope.

For Example:

static int num;
struct 
The struct keyword in C programming language is used to declare a structure. A structure is a list of variables, (they can be of different data types), which are grouped together under one data type.

For Example:

struct Geek {
    char name[50];
    int num;
    double var;
};
Below is the C program for the struct keyword:



1
// C program to demonstrate 
2
// struct keyword
3
#include <stdio.h>
4
#include <string.h>
5
​
6
struct Books {
7
  char  title[50];
8
  char  author[50];
9
};
10
​
11
// Driver code
12
int main( ) {
13
  // Declare Book1 of type Book
14
  struct Books book1;        
15
   
16
 // book 1 specification 
17
 strcpy(book1.title, "C++ Programming");
18
 strcpy(book1.author, "Bjarne Stroustrup"); 
19
 
20
 // Print book details
21
 printf("Book 1 title : %s\n", book1.title);
22
 printf("Book 1 author : %s\n", book1.author);
23
 return 0;
24
}

Output
Book 1 title : C++ Programming
Book 1 author : Bjarne Stroustrup
typedef 
The typedef keyword in C programming language is used to define a data type with a new name in the program. typedef keyword is used to make our code more readable.

For Example:

typedef long num
In this example we have changed the datatype name of “long” to “num”.

union 
The union is a user-defined data type. All data members which are declared under the union keyword share the same memory location.

Example:

union GeekforGeeks {
    int x;
    char s;
} obj;
Below is the C program for the union keyword:



1
#include <stdio.h>
2
union student {  
3
  int age;  
4
  char marks;   
5
} s;  
6
​
7
// Driver code
8
int main() {  
9
  s.age = 15;  
10
  s.marks = 56;
11
  printf("age = %d", s.age);  
12
  printf("\nmarks = %d", s.marks);  
13
}

Output
age = 56
marks = 56
void 
The void keyword means nothing i.e, NULL value. When the function return type is used as the void, the keyword void specifies that it has no return value.

Example:

void fun() {
    // program
}
volatile
The volatile keyword is used to create volatile objects. Objects which are declared volatile are omitted from optimization as their values can be changed by code outside the scope of the current code at any point in time.

For Example:

const volatile marks = 98;
marks are declared constant so they can’t be changed by the program. But hardware can change it as they are volatile objects.

while
The while keyword is used to declare a while loop that runs till the given condition is true.

Example:



1
#include <stdio.h>
2
​
3
int main() {
4
    int i = 0;
5
​
6
    // While loop that execute till i is less than 3
7
    while (i < 3) {
8
        printf("Hi\n");
9
        i++;
10
    }
11
  
12
    return 0;
13
}

Output
Hi
Hi
Hi
Conclusion
In this article, the points we learned about the keywords are mentioned below:

Keywords are Reserved words in C with certain meanings.
We can’t use keywords as any element’s name.
There are 32 keywords in C all having unique meanings.
